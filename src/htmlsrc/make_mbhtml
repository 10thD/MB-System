eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
                    & eval 'exec perl -S $0 $argv:q'
                         if 0;
#--------------------------------------------------------------------
#    The MB-system:	make_mbhtml	8/19/97
#
#    Copyright (c) 1997-2019 by
#    D. W. Caress (caress@lamont.ldgo.columbia.edu)
#    and D. N. Chayes (dale@lamont.ldgo.columbia.edu)
#    Lamont-Doherty Earth Observatory
#    Palisades, NY  10964
#
#    See README file for copying and redistribution conditions.
#--------------------------------------------------------------------
#
# Command:
#   make_mbhtml
#
# Purpose:
#   Macro to automatically generate html files from
#   MB-System man pages and place them in the mbsystem/src/html
#   directory. This tool is not for direct inclusion in the
#   MB-System distribution.
#
# Required Software
#   groff
#   pandoc
#
# Author:
#   David W. Caress
#   Lamont-Doherty Earth Observatory
#   Palisades, NY  10964
#   August 19,  1997
#
#
#
#--------------------------------------------------------------------
#
# Set program name
$program_name = "make_mbhtml";

# Make or clear html directory
print "Clearing ../html\n";
`/bin/rm -r -f ../html`;
`mkdir ../html`;
`cp CMakeLists_html.txt ../html/CMakeLists.txt`;
`cp Makefile_html.am ../html/Makefile.am`;

# generate mbsystem_formats.html using special option for mbformat
print "mbformat -W > mbsystem_formats.html\n";
`mbformat -W > mbsystem_formats.html`;

# Get the MB-System version and release date from ../mbio/mb_define.h
# This header file is generated by the configure script
`grep "#define MB_VERSION " ../mbio/mb_define.h | awk '{print "MB-System Version: ",\$3}' > ../html/mbsystem_version.txt`;
`grep "#define MB_VERSION_DATE " ../mbio/mb_define.h | awk '{print "MB-System Release Date: ",\$3,\$4,\$5}' >> ../html/mbsystem_version.txt`;
print "MB-System version:\n";
`cat ../html/mbsystem_version.txt`;

# Translate ChangeLog.md COPYING.md GPL.md from Markdown to html and pdf using application pandoc
print "Translating ChangeLog.md COPYING.md GPL.md to html and pdf...\n";
print "Translating ChangeLog.md...\n";
`pandoc ../../ChangeLog.md -f gfm -o ../html/ChangeLog.html`;
print "Translating ChangeLog.html...\n";
`pandoc ../html/ChangeLog.html -f html -o ../html/ChangeLog.pdf`;
print "Translating COPYING.md...\n";
`pandoc ../../COPYING.md -f gfm -o ../html/COPYING.html`;
print "Translating COPYING.html...\n";
`pandoc ../html/COPYING.html -f html -o ../html/COPYING.pdf`;
print "Translating GPL.md...\n";
`pandoc ../../GPL.md -f gfm -o ../html/GPL.html`;
print "Translating GPL.html...\n";
`pandoc ../html/GPL.html -f html -o ../html/GPL.pdf`;

# Copy necessary files
@preformatted_files = `/bin/ls -1 mbsystem_*.html mbsystem_version.txt mbsystem*.gif`;
foreach $file (@preformatted_files) {
    chop($file);
    print "cp $file ../html\n";
    `cp $file ../html`;
    chmod 0664, "../html/$file";
    }

# Get list of man page files to process
@manual_pages = `/bin/ls -1 ../man/man*/mb*`;

# Get header and footer data
@man_header_lines = `cat mbsystem_man_hdr.frag`;
@man_header2_lines = `cat mbsystem_man_hdr2.frag`;
@man_footer_lines = `cat mbsystem_man_ftr.frag`;

# Get operating system
$os = `uname -s`;
chop($os);
$groff = "groff";
print "Operating System: $os\nFormatter: $groff\n";

# Loop over files
`cc man2html.c -o man2html`;
foreach $manpageraw (@manual_pages) {
    chop($manpageraw);
    ($man_page) = $manpageraw =~ /^\.\.\/man\/man.\/(\S+)\../;
    print "\nProcessing manual page for $man_page...\n";

    # first generate a pdf version for mbsystem/pdf
    print "Generating ../html/$man_page.pdf\n";
    `$groff -man -Tpdf $manpageraw > ../html/$man_page.pdf`;

    # Generate an initial html file - use man2html rather than groff because the results look better
    print "Generating ../html/$man_page.html\n";
    $raw_html_file = "./$man_page.html";
    $date = `head -1 $manpageraw | awk '{print \$4,\$5,\$6}'`;
    chop($date);
    chop($date);
    $date = substr($date, 1);
#    `$groff -man -Thtml $manpageraw  > $raw_html_file`;
    `cat $manpageraw | ./man2html -f > $raw_html_file`;

    # Open the input file
    if (!open(IHTML,"$raw_html_file"))
	{
	print "\a";
	die "Cannot open raw html file $raw_html_file\nMacro $program_name aborted.\n";
	}

    # Open the output html file
    $html_file = "../html/$man_page.html";
    if (!open(OHTML,">$html_file"))
	{
	print "\a";
	die "Cannot open output file $html_file\nMacro $program_name aborted.\n";
	}

    # Put header stuff into html file
    foreach $line (@man_header_lines) {
	print OHTML $line;
	}
    print OHTML "   <TITLE>MB-System Unix Manual Page: $man_page</TITLE>\n";
    foreach $line (@man_header2_lines) {
	print OHTML $line;
	}

    # Read and process lines from raw html file
    $line_count = 0;
    $line_total = `cat $raw_html_file | wc -l`;
    while ($line = <IHTML>) {
	$line_count++;
	if ($line_count > 3
	    && $line_count < $line_total - 3)
	    {
	    print OHTML $line;
	    }
	}

    # Close and remove the raw html file
    close IHTML;
    `rm -f $raw_html_file`;

    # Put last update date line into html file
    print OHTML "</PRE>\n\n<CENTER><P><BR>\nLast Updated: $date</P></CENTER>\n\n";

    # Put footer stuff into html file
    foreach $line (@man_footer_lines) {
	print OHTML $line;
	}

    # Close the output file and set mode
    close OHTML;
    chmod 0664, $html_file;

    # End loop over man pages
    }

# Exit the program
exit 0;

#-----------------------------------------------------------------------
