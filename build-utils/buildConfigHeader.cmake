# Generate src/mbio/mb_config.h 
message("Now in buildConfigHeader")

function(buildConfigHeader gsfEnabled)

   set(outfile "mytest.out")
   
   file(WRITE ${outfile}
        "// This file automatically generated by build-tools/buildConfigHeader.cmake\n\n")
        
   # Header guard
   file(APPEND ${outfile} "#ifndef __MB_CONFIG_H_\n")
   file(APPEND ${outfile} "#define __MB_CONFIG_H_\n\n")

   include(TestBigEndian)
   test_big_endian(bigEndian)
   file(APPEND ${outfile} "// Bytes are swapped (little-endian)?\n")
   if (bigEndian)
     file(APPEND ${outfile} "#define BYTESWAPPED 0\n\n")
   else()
     file(APPEND ${outfile} "#define BYTESWAPPED 1\n\n")
   endif()
   
   file(APPEND ${outfile} "// Build with GSF?\n")
   file(APPEND ${outfile} "#define ENABLE_GSF ${gsfEnabled}\n\n")
   
   file(APPEND ${outfile} "// Machine is bigendian, (Byteswapping off)?\n")
   file(APPEND ${outfile} "#define ENDIAN_BIG ${bigEndian}\n\n")

   file(APPEND ${outfile} "// Compiler supports basic C++11 syntax?\n")
   if (${CMAKE_CXX_STANDARD} EQUAL 11)
     file(APPEND ${outfile} "#define HAVE_CXX11 1\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_CXX11 0\n\n")
   endif()
   
   file(APPEND ${outfile} "// Have <dlfcn.h>?\n")
   find_file(fn1 "dlfcn.h" NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn1} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_DLFCN_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_DLFCN_H 1\n\n")   
   endif()

#[[     
/*
/* Have `gsincos' function. */
/* #undef HAVE_GSINCOS */
]]

  file(APPEND ${outfile} "// Have <inttypes.h>?\n")
   message("CMAKE_SYSTEM_PREFIX_PATH: ${CMAKE_SYSTEM_PREFIX_PATH}")
   find_file(fn2 "inttypes.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   message("AFTER - fn2: ${fn2}")
   if (${fn2} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_INTTYPES_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_INTTYPES_H 1\n\n")   
   endif()
   
   file(APPEND ${outfile} "// Have `m' (math) library\n")
   message("CMAKE_SYSTEM_LIBRARY_PATH: ${CMAKE_SYSTEM_LIBRARY_PATH}")
   find_library(lib1 "m" NO_CACHE)
   message("lib1: ${lib1}")
   if (${lib1} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_LIBM 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_LIBM 1\n\n")   
   endif()
   
   file(APPEND ${outfile} "// Have `pthread' library?\n")
   find_library(lib2 "pthread" NO_CACHE)
   message("lib2: ${lib2}")
   if (${lib2} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_LIBPTHREAD 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_LIBPTHREAD 1\n\n")   
   endif()

   file(APPEND ${outfile} "// Have <malloc.h>?\n")
   find_file(fn3 "malloc.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn3} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_MALLOC_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_MALLOC_H 1\n\n") 
   endif()

   file(APPEND ${outfile} "// Have <rpc/rpc.h>?\n")
   find_file(fn4 "rpc/rpc.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn4} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_RPC_RPC_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_RPC_RPC_H 1\n\n")
   endif()
   
#[[

#define HAVE_RPC_RPC_H 1
/* Have `sincos' function. */
/* #undef HAVE_SINCOS */
]]

   file(APPEND ${outfile} "// Have <stdint.h>?\n")
   find_file(fn5 "stdint.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn5} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_STDINT_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_STDINT_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <stdio.h>?\n")
   find_file(fn6 "stdio.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn6} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_STDIO_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_STDIO_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <stdlib.h>?\n")
   find_file(fn7 "stdlib.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn7} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_STDLIB_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_STDLIB_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <strings.h>?\n")
   find_file(fn8 "strings.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn8} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_STRINGS_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_STRINGS_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <string.h>?\n")
   find_file(fn9 "string.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn9} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_STRING_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_STRING_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <stat.h>?\n")
   find_file(fn10 "sys/stat.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH} ${CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES})
   if (${fn10} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_SYS_STAT_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_SYS_STAT_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <sys/types.h>?\n")
   find_file(fn11 "sys/types.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn11} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_SYS_TYPES_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_SYS_TYPES_H 1\n\n")
   endif()

   file(APPEND ${outfile} "// Have <unistd.h>?\n")
   find_file(fn12 "unistd.h" 
             NO_CACHE PATHS ${CMAKE_SYSTEM_PREFIX_PATH})
   if (${fn12} MATCHES "-NOTFOUND")
     file(APPEND ${outfile} "#define HAVE_UNISTD_H 0\n\n")
   else()
     file(APPEND ${outfile} "#define HAVE_UNISTD_H 1\n\n")
   endif()


   file(APPEND ${outfile} "\n#define MBSYSTEM_CONFIG_DEFINED 1\n\n")

   file(APPEND ${outfile} "// Installation prefix\n")
   file(APPEND ${outfile} "#define MBSYSTEM_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\"\n\n")   

   execute_process(COMMAND "git" describe --tags --always
                   OUTPUT_VARIABLE tmp)

   message("tmp: ${tmp} OK")
   string(STRIP ${tmp} gitVersion)
   message("gitVersion: ${gitVersion} OK")

   file(APPEND ${outfile} "// Package version\n")
   file(APPEND ${outfile} "#define PACKAGE_VERSION \"${gitVersion}\"\n\n")

   set(packageName "mbsystem")
   
   file(APPEND ${outfile} "// Define full package name \n")
   file(APPEND ${outfile} "#define PACKAGE \"${packageName}\"\n\n")

   file(APPEND ${outfile} "// Define full package name and version\n")
   file(APPEND ${outfile} "#define PACKAGE_STRING ${packageName} \"${gitVersion}\"\n\n")
   

   file(APPEND ${outfile} "// Define package short name")
   file(APPEND ${outfile} "#define PACKAGE_TARNAME \"mbsystem\"\n\n")


#[[
/*
/* Define to the sub-directory where libtool stores uninstalled libraries. */
/*
#define LT_OBJDIR ".libs/"


/* Set MBSYSTEM_OTPS_LOCATION define in mb_config.h */
/*
#define MBSYSTEM_OTPS_LOCATION "/usr/local/opt/otps"
/* Build libmbtnav and embed TRN instance in mbtrnpp */
/*
#define MBTNAV_ENABLED 1
/* Build libmbtrn and mbtrnpp */
/*
#define MBTRN_ENABLED 1

/* Build graphical tools */
/*
#define MB_GRAPHICAL_ENABLED 1

/* Build tools using OpenCV */
/*
#define OPENCVTOOLS_ENABLED 1

/* Name of package */
/*
#define PACKAGE "mbsystem"

/* Define to the address where bug reports for this package should be sent. */
/*
#define PACKAGE_BUGREPORT "http://listserver.mbari.org/sympa/arc/mbsystem"

/* Define to the home page for this package. */
/*
#define PACKAGE_URL "http://www.mbari.org/data/mbsystem/"


/* Build tools using PCL */
/* #undef PCLTOOLS_ENABLED */
/* Build tools using Qt5 */
/* #undef QTTOOLS_ENABLED */
/* Define to 1 if all of the C90 standard headers exist (not just the ones
   required in a freestanding environment). This macro is provided for
   backward compatibility; new code need not use it. */
backward
#define STDC_HEADERS 1

/* Building unit tests */
/*
#define TEST_ENABLED 1

/* Version number of package */
/*
#define VERSION "5.7.9beta26"

/* Set VERSION_DATE define in mb_config.h */
/*
#define VERSION_DATE "2 January 2022"

/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
   significant byte first (like Motorola and SPARC, unlike Intel). */
#if defined AC_APPLE_UNIVERSAL_BUILD
# if defined __BIG_ENDIAN__
#  define WORDS_BIGENDIAN 1
# endif
#else
# ifndef WORDS_BIGENDIAN
/* #  undef WORDS_BIGENDIAN */
# endif
#endif

/* Define to 1 if the X Window System is missing or not being used. */
/* #undef X_DISPLAY_MISSING */

/* Define to the type of a signed integer type of width exactly 8 bits if such
   a type exists and the standard includes do not define it. */
/* #undef int8_t */
]]

# End header guard
file(APPEND ${outfile} "#endif    // MB_CONFIG_H_\n")

endfunction()
